// Code generated by templ@v0.2.186 DO NOT EDIT.

package made

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

func NoWrap() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`flex-wrap:nowrap;`)
	templCSSID := templ.CSSID(`NoWrap`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Wrap() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`flex-wrap:wrap;`)
	templCSSID := templ.CSSID(`Wrap`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func WrapReverse() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`flex-wrap:wrap-reverse;`)
	templCSSID := templ.CSSID(`WrapReverse`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Center() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`align-items:center;`)
	templCSSBuilder.WriteString(`justify-content:center;`)
	templCSSID := templ.CSSID(`Center`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Start() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`align-items:flex-start;`)
	templCSSBuilder.WriteString(`justify-content:flex-start;`)
	templCSSID := templ.CSSID(`Start`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func End() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`align-items:flex-end;`)
	templCSSBuilder.WriteString(`justify-content:flex-end;`)
	templCSSID := templ.CSSID(`End`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func SpaceBetween() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`justify-content:space-between;`)
	templCSSID := templ.CSSID(`SpaceBetween`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func SpaceAround() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`justify-content:space-around;`)
	templCSSID := templ.CSSID(`SpaceAround`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Column() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSBuilder.WriteString(`width:100%;`)
	templCSSBuilder.WriteString(`height:100%;`)
	templCSSBuilder.WriteString(`flex-direction:column;`)
	templCSSID := templ.CSSID(`Column`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func ColumnReverse() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSBuilder.WriteString(`width:100%;`)
	templCSSBuilder.WriteString(`height:100%;`)
	templCSSBuilder.WriteString(`flex-direction:column-reverse;`)
	templCSSID := templ.CSSID(`ColumnReverse`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Row() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSBuilder.WriteString(`width:100%;`)
	templCSSBuilder.WriteString(`height:100%;`)
	templCSSBuilder.WriteString(`flex-direction:row;`)
	templCSSID := templ.CSSID(`Row`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func RowReverse() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:flex;`)
	templCSSBuilder.WriteString(`width:100%;`)
	templCSSBuilder.WriteString(`height:100%;`)
	templCSSBuilder.WriteString(`flex-direction:row-reverse;`)
	templCSSID := templ.CSSID(`RowReverse`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID: templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func Box(comp []templ.Component, css ...templ.CSSClass) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = new(bytes.Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		// Element CSS
		var var_2 templ.CSSClasses = templ.Classes(css...)
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(var_2.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// For
		for _, c := range comp {
			// CallTemplate
			err = c.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

